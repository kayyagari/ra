expression
        = term                                                                  ;termExpression
        / expression "." invocation                                             ;invocationExpression
        / expression "[" expression "]"                                         ;indexerExpression
        / ("+" / "-") expression                                                ;polarityExpression
        / expression ("*" / "/" / SP "div" SP / SP "mod" SP) expression         ;multiplicativeExpression
        / expression ("+" / "-" / "&") expression                               ;additiveExpression
        / expression SP ("is" / "as") SP typeSpecifier                          ;typeExpression
        / expression "|" expression                                             ;unionExpression
        / expression ("<=" / "<" / ">" / ">=") expression                       ;inequalityExpression
        / expression ("=" / "~" / "!=" / "!~") expression                       ;equalityExpression
        / expression SP ("in" / "contains") SP expression                       ;membershipExpression
        / expression SP "and" SP expression                                     ;andExpression
        / expression SP ("or" / "xor") SP expression                            ;orExpression
        / expression SP "implies" SP expression                                 ;impliesExpression
        ; (IDENTIFIER)? "=>" expression                                         ;lambdaExpression

term
        = invocation                                            ;invocationTerm
        / literal                                               ;literalTerm
        / externalConstant                                      ;externalConstantTerm
        / "(" expression ")"                                    ;parenthesizedTerm
        ;

literal
        = "{}"                                                  ;nullLiteral
        / ("true" / "false")                                    ;booleanLiteral
        / STRING                                                ;stringLiteral
        / NUMBER                                                ;numberLiteral
        / DATE                                                  ;dateLiteral
        / DATETIME                                              ;dateTimeLiteral
        / TIME                                                  ;timeLiteral
        / quantity                                              ;quantityLiteral
        ;

externalConstant
        = "%" ( identifier / STRING )
        ;

invocation                          ; Terms that can be used after the function/member invocation "."
        = identifier                                            ;memberInvocation
        / function                                              ;functionInvocation
        / "$this"                                               ;thisInvocation
        / "$index"                                              ;indexInvocation
        / "$total"                                              ;totalInvocation
        ;

function
        = identifier "(" [paramList] ")"
        ;

paramList
        = expression *("," expression)
        ;

quantity
        = NUMBER SP [unit]
        ;

unit
        = dateTimePrecision
        / pluralDateTimePrecision
        / STRING ; UCUM syntax for units of measure
        ;

dateTimePrecision
        = "year" / "month" / "week" / "day" / "hour" / "minute" / "second" / "millisecond"
        ;

pluralDateTimePrecision
        = "years" / "months" / "weeks" / "days" / "hours" / "minutes" / "seconds" / "milliseconds"
        ;

typeSpecifier
        = qualifiedIdentifier
        ;

qualifiedIdentifier
        = identifier *("." identifier)
        ;

identifier
        = IDENTIFIERVAL
        / DELIMITEDIDENTIFIER
        / "as"
        / "contains"
        / "in"
        / "is"
        ;


;****************************************************************
;    Lexical rules
;*****************************************************************


;NOTE= The goal of these rules in the grammar is to provide a date
;token to the parser. As such it is not attempting to validate that
;the date is a correct date, that task is for the parser or interpreter.


DATE
        = "@" DATEFORMAT
        ;

DATETIME
        = "@" DATEFORMAT "T" [(TIMEFORMAT [TIMEZONEOFFSETFORMAT])]
        ;

TIME
        = "@T" TIMEFORMAT
        ;

DATEFORMAT
        = DIGIT DIGIT DIGIT DIGIT [("-" DIGIT DIGIT [("-" DIGIT DIGIT)])]
        ;

TIMEFORMAT
        =  DIGIT DIGIT [("=" DIGIT DIGIT [("=" DIGIT DIGIT [("." 1*DIGIT)])])]
        ;

TIMEZONEOFFSETFORMAT
        = ("Z" / ("+" / "-")  DIGIT DIGIT ":" DIGIT DIGIT)
        ;

IDENTIFIERVAL
        = ["_"] 1*ALPHA [*(DIGIT / ALPHA)]          ; Added _ to support CQL (FHIR could constrain it out)
        ;

DELIMITEDIDENTIFIER
        = "`" 1*ALPHA [*DIGIT] "`"
        ;

STRING
        = QUOTE *(VCHAR / ESCUNICODE) QUOTE
        ;

; Also allows leading zeroes now (just like CQL and XSD)
NUMBER
        =  1*DIGIT [("."  1*DIGIT)]
        ;

COMMENT
        = "/*" *CHAR "*/"
        ;

LINECOMMENT
        = "//" *CHAR
        ;


ESCUNICODE
        = "\\u" HEXDIG HEXDIG HEXDIG HEXDIG
        ;
QUOTE
        = "'"
        ;